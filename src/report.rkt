#lang racket

(require "utils.rkt")
(require "defs.rkt")
(require xml)
(require net/sendurl)
(require "hist-report.rkt")

(provide row-sorter
         column-sorter
         column-filter
         simple-html-reporter
         pretty-html-reporter
         histogram-plotter)

(define (row-sorter column (op >))
  (lambda (results)
    (sort results op #:key (lambda (row)
                             (get-value-of column row)))))

(define (column-sorter (op string>?))
  (lambda (results)
    (map (lambda (result)
           (sort result op #:key (lambda (cell)
                                   (symbol->string (car cell)))))
         results)))

(define (column-filter columns #:show (show not))
  (lambda (results)
    (map (lambda (result)
           (filter (lambda (cell) (show (member (car cell) columns))) result))
         results)))

(define-values (html-dir file dir?) (split-path (simplify-path (path->complete-path (find-system-path 'run-file)))))

(define (simple-html-reporter dir summary detail)
  (let ((page-name "ScanLisp Report")
        (scanlisp.css (format "~a~a" html-dir "html/css/scanlisp.css")))
    (send-url/contents
     (format "<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">~a"
             (xexpr->string
              `(html
                (head 
                 (title ,page-name)
                 (link ((rel "stylesheet")
                        (href ,scanlisp.css))))
                (body
                 (div ((id "Banner"))
                      (h1 ,page-name))
                 ,@(if (pair? summary)
                       `((div ((id "Summary"))
                              ,(if dir
                                   `(div ((id "SumProj"))
                                         ,(format "Project directory: ~a" dir))
                                   "")
                              ,@(map (lambda (summary)
                                       `(table ((class "SumTab"))
                                               (tr ,@(map (lambda (p)
                                                            (print-value (cdr p))
                                                            `(td ((class "SumHead")
                                                                  (id ,(format "Sum~a" (car p))))
                                                                 ,(format "~a" (print-description (cdr p)))))
                                                          summary))
                                               (tr ,@(map (lambda (p)
                                                            `(td ((class "SumContent")
                                                                  (id ,(format "Sum~a" (car p))))
                                                                 ,(format "~a" (print-value (cdr p)))))
                                                          summary))))
                                     (rest summary))))
                       '(""))
                 
                 (div ((id "Detail"))
                      (table ((id "DetTab"))
                             ,@(let/cc ret
                                 (let loop ((row (car detail))
                                            (rest (cdr detail))
                                            (lines null)
                                            (ind 1))
                                   (define (gen-tr (op print-value) (head #f))
                                     `(tr ,@(map (lambda (p)
                                                   `(td ((class ,(if head "DetHead" (if (even? ind) "DetEven" "DetOdd")))
                                                         (id ,(format "Det~a" (car p))))
                                                        ,(format "~a" (op (cdr p)))))
                                                 row)))
                                   (let ((tr (gen-tr)))
                                     (when (null? rest)
                                       (ret (cons (gen-tr print-description #t) (cons tr lines))))
                                     (loop (car rest)
                                           (cdr rest)
                                           (cons tr lines)
                                           (add1 ind)))))))
                 (div ((id "Footer"))
                      "Powered by Racket"))))))
    (void)))

(define (pretty-html-reporter dir summary detail)
  (let ((page-name "ScanLisp Report")
        (css-file (format "~a~a" html-dir "html/css/scanlisp.css"))
        (page.css (format "~a~a" html-dir "html/css/page.css"))
        (table.css (format "~a~a" html-dir "html/css/table.css"))
        (table_jui.css (format "~a~a" html-dir "html/css/table_jui.css"))
        (scanlisp.css (format "~a~a" html-dir "html/css/scanlisp.css"))
        (jquery.js (format "~a~a" html-dir "html/js/jquery.js"))
        (jquery-ui.js (format "~a~a" html-dir "/html/js/jquery-ui.js"))
        (jquery-dataTables.js (format "~a~a" html-dir "html/js/jquery.dataTables.js"))
        (load.js (format "~a~a" html-dir "html/js/load.js")))
    (send-url/contents
     (format "<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">~a"
             (xexpr->string
              `(html
                (head 
                 (title ,page-name)
                 (link ((rel "stylesheet")
                        (href ,page.css)))
                 (link ((rel "stylesheet")
                        (href ,table.css)))
                 (link ((rel "stylesheet")
                        (href ,table_jui.css)))
                 (script ((src ,jquery.js)))
                 (script ((src ,jquery-ui.js)))
                 (script ((src ,jquery-dataTables.js)))
                 (script ((src ,load.js))))
                (body
                 (div ((id "Banner"))
                      (h1 ,page-name))
                 ,@(if (pair? summary)
                       `((div ((id "Summary"))
                              (h2 "Summary")
                              ,(if dir
                                   `(div ((id "SumProj"))
                                         ,(format "Project directory: ~a" dir))
                                   "")
                              ,@(map (lambda (summary heading)
                                       (if (pair? summary)
                                           `(div ((class "SumTabDiv")) 
                                                 (h4 ((class "SumTabTitle")) ,heading)
                                                 (table ((class "SumTab display")
                                                         (cellspacing "0"))
                                                        (thead (tr ,@(map (lambda (p) 
                                                                            (print-value (cdr p))
                                                                            `(td ((class "SumHead")
                                                                                  (id ,(format "Sum~a" (car p))))
                                                                                 ,(format "~a" (print-description (cdr p)))))
                                                                          summary)))
                                                        (tbody (tr ,@(map (lambda (p)
                                                                            `(td ((class "SumContent")
                                                                                  (id ,(format "Sum~a" (car p))))
                                                                                 ,(format "~a" (print-value (cdr p)))))
                                                                          summary)))))
                                           ""))
                                     (rest summary)
                                     (list "Total" "Max" "Min"))))
                       '(""))
                 
                 (div ((id "Detail"))
                      (h2 "Detail")
                      (table ((id "DetTab")
                              (class "display")
                              (cellspacing "0"))
                             ,@(let/cc ret
                                 (let loop ((row (car detail))
                                            (rest (cdr detail))
                                            (lines null)
                                            (ind 1))
                                   (define (gen-tr (op print-value) (head #f))
                                     `(tr ,@(map (lambda (p)
                                                   `(td ((class ,(if head "DetHead" (if (even? ind) "DetEven" "DetOdd")))
                                                         (id ,(format "Det~a" (car p))))
                                                        ,(format "~a" (op (cdr p)))))
                                                 row)))
                                   (let ((tr (gen-tr)))
                                     (when (null? rest)
                                       (ret (list `(thead ,(gen-tr print-description #t)) `(tbody ,@(cons tr lines)))))
                                     (loop (car rest)
                                           (cdr rest)
                                           (cons tr lines)
                                           (add1 ind)))))))
                 (div ((id "Footer"))
                      "Powered by Racket"))))))
    (void)))

(define (histogram-plotter (lower #f) (upper #f) (step #f) #:title (title "") #:x-label (x-label "") #:y-label (y-label "") #:compact (compact 'none))
  (define ->int (compose inexact->exact round))
  (lambda vs
    (let* ((upper (or upper (apply max vs)))
           (lower (or lower (apply min vs)))
           (u (->int (max upper lower)))
           (l (->int (min upper lower)))
           (s (or step (expt (- u l) 1/3)))
           (s (->int (if (zero? s) 1 s)))
           (h (make-hist l u s)))
      (map (lambda (v) (class-hist h (->int v))) vs)
      (define compacting (case compact
                           ((lv1) (lambda (h) (optimize-hist h 5)))
                           ((lv2) (lambda (h) (optimize-hist h 3)))
                           ((lv3) compact-hist)
                           (else identity)))
      (let ((h (compacting h)))
        (plot-hist h #:title title #:x-label x-label #:y-label y-label #:width-ratio (/ (length h) 8))))))